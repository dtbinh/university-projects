#!/bin/bash

VER="0.6"
echo "OS 314 Builder, by Carl Crous. Version $VER"
echo

DD_ERR_FILE="bld_dd_error.txt"

function col_start {
	#echo -e "\033[31;47m"
	echo -e "\033[1m"
}
function col_end {
	echo -e "\033[0m"
}

function write_disk {
	DD_ERR_OUT="dd: opening \`/dev/fd0': No such device or address"
	echo "Copying files to disk"
	dd $1 bs=512 2> $DD_ERR_FILE
	while [  "$(cat $DD_ERR_FILE)" = "$DD_ERR_OUT" ]; do
		col_start
		echo "Please insert a floppy disk into the computer and press enter, or press [Ctrl]-C to quit."
		col_end
		read
		dd $1 bs=512 2> $DD_ERR_FILE
	done
	echo "Copying Successful"
}

function write_image {
	echo "Writing Bochs Image"
	#bximage -q -fd -size="1.44" disk.img
	dd if=bootstraploader/boot of=disk.img bs=512 conv=notrunc
	dd if=os314 of=disk.img seek=18 bs=512 conv=notrunc
	echo "Done Bochs Image"
}	

function write_vm_image {
	echo "Writing VM-Ware Image"
	#bximage -q -fd -size="1.44" disk.img
	dd if=bootstraploader/boot of=disk.flp bs=512 conv=notrunc
	dd if=os314 of=disk.flp seek=18 bs=512 conv=notrunc
	echo "Done VM-Ware Image"
}

if [ "$1" = "boot" ]; then
	echo "Building the Boot Strap Loader"
	cd bootstraploader
	nasm -f bin boot.nasm
	write_disk "if=boot of=/dev/fd0"
	echo "Done Boot Strap Loader"
	echo 
	rm -f $DD_ERR_FILE
	cd ..
elif [ "$1" = "clean" ]; then
	echo "Doing a Clean Build"
	make clean >> $DD_ERR_FILE
elif [ "$1" = "bochs" ]; then
	OUTPUT="bochs"
elif [ "$1" = "vm" ]; then
	OUTPUT="vm"
elif [ "$1" = "floppy" ]; then
	OUTPUT="floppy"
elif [ "$1" = "image" ]; then
	OUTPUT="image"
elif [ -n "$1" ]; then
	col_start
	echo "Invaid option. Usage:"
	echo "    boot   : Write the bootstrap loader to a floppy disk"
	echo "    floppy : Write os314 to a floppy disk."
       	echo "    clean  : Do a clean build."
	echo "    bochs  : Build a bochs image, disk.img, and run bochs."
	echo "    image  : Just build a bochs image."
	echo "    vm     : Build a vmware image, disk.flp. Note: this image must first be created by vmware."
	echo "    <dest> process <proc> <sector>: write process <proc> at sector <sector> to <dest> where <dest> is in (floppy,image,vm)."
	col_end
	echo
fi
	
	
OUT_FILE="bld_output.txt"
ERR_FILE="bld_error.txt"
ERR_FILE2="bld_2nd_error.txt"

if [ "$2" = "process" ]; then
	echo "Writing Process $2 to disk at sector $3."
	if [ "$OUTPUT" = "bochs" ]; then
		OF="disk.img"
	elif [ "$OUTPUT" = "image" ]; then
		OF="disk.img"
	elif [ "$OUTPUT" = "vm" ]; then
		OF="disk.flp"
	elif [ "$OUTPUT" = "floppy" ]; then
		OF="/dev/fd0"
	fi
	dd if=$3 of=$OF seek=$4 bs=512
	echo "Written process."
else
	echo "Building os314"
	make all > $OUT_FILE 2> $ERR_FILE
	EXP_OUT="make: Nothing to be done for \`all'."
	#echo "OUT:: ('$EXP_OUT')"
	#echo "OUT:: ('$(cat $OUT_FILE)')"
	if [ "$(cat $OUT_FILE)" = "$EXP_OUT" ]; then
		BUILT="1"
		echo "No compile needed"
	else	
		make all > $OUT_FILE 2> $ERR_FILE2
		EXP_OUT="make: Nothing to be done for \`all'."
	#	echo "OUT:: ('$EXP_OUT')"
	#	echo "OUT:: ('$(cat $OUT_FILE)')"
		if [ "$(cat $OUT_FILE)" = "$EXP_OUT" ]; then
			echo "Build Successful"
			BUILT="1"
		else
			BUILT="0"
		fi

	fi

	if [ "$BUILT" = "1" ]; then
		if [ "$OUTPUT" = "bochs" ]; then
			write_image
			bochs -q
		elif [ "$OUTPUT" = "image" ]; then
			write_image
		elif [ "$OUTPUT" = "vm" ]; then
			write_vm_image
		elif [ "$OUTPUT" = "floppy" ]; then
			write_disk "if=os314 of=/dev/fd0 seek=18"
		fi
		echo "Done os314"
		if [ -n "$(cat $ERR_FILE)" ]; then
			echo "There were some warnings:"
			echo
			col_start
			echo "$(cat $ERR_FILE)"
			col_end
			echo
		fi
	else
		col_start
		echo "There were errors building:"
		echo "$(cat $ERR_FILE)"
		col_end
	fi
fi

rm -rf $OUT_FILE $ERR_FILE $ERR_FILE2 $DD_ERR_FILE


