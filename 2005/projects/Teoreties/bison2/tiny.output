Terminals which are not used

   THEN
   RETURN


Grammar

    0 $accept: program $end

    1 program: stmt_seq

    2 stmt_seq: stmt_seq stmt ';'
    3         | stmt ';'

    4 stmt: if_stmt
    5     | repeat_stmt
    6     | assign_stmt
    7     | read_stmt
    8     | write_stmt
    9     | for_stmt
   10     | while_stmt

   11 if_stmt: IF exp stmt_seq END
   12        | IF exp stmt_seq ELSE stmt_seq END

   13 repeat_stmt: REPEAT stmt_seq UNTIL '(' exp ')'

   14 for_stmt: FOR '(' assign_stmt ',' exp ',' assign_stmt ')' stmt_seq END

   15 while_stmt: WHILE '(' exp ')' stmt_seq END

   16 write_stmt: PRINT '(' exp ')'

   17 assign_stmt: ID '=' exp

   18 read_stmt: SCAN '(' ID ')'

   19 exp: simple_exp '<' simple_exp
   20    | simple_exp '>' simple_exp
   21    | simple_exp EQUAL simple_exp
   22    | simple_exp

   23 simple_exp: simple_exp '+' term
   24           | simple_exp '-' term
   25           | term

   26 term: term '*' factor
   27     | term '/' factor
   28     | factor

   29 factor: '(' exp ')'
   30       | NUM
   31       | ID


Terminals, with rules where they appear

$end (0) 0
'(' (40) 13 14 15 16 18 29
')' (41) 13 14 15 16 18 29
'*' (42) 26
'+' (43) 23
',' (44) 14
'-' (45) 24
'/' (47) 27
';' (59) 2 3
'<' (60) 19
'=' (61) 17
'>' (62) 20
error (256)
IF (258) 11 12
THEN (259)
ELSE (260) 12
END (261) 11 12 14 15
REPEAT (262) 13
UNTIL (263) 13
SCAN (264) 18
PRINT (265) 16
ID (266) 17 18 31
NUM (267) 30
EQUAL (268) 21
FOR (269) 14
WHILE (270) 15
RETURN (271)


Nonterminals, with rules where they appear

$accept (28)
    on left: 0
program (29)
    on left: 1, on right: 0
stmt_seq (30)
    on left: 2 3, on right: 1 2 11 12 13 14 15
stmt (31)
    on left: 4 5 6 7 8 9 10, on right: 2 3
if_stmt (32)
    on left: 11 12, on right: 4
repeat_stmt (33)
    on left: 13, on right: 5
for_stmt (34)
    on left: 14, on right: 9
while_stmt (35)
    on left: 15, on right: 10
write_stmt (36)
    on left: 16, on right: 8
assign_stmt (37)
    on left: 17, on right: 6 14
read_stmt (38)
    on left: 18, on right: 7
exp (39)
    on left: 19 20 21 22, on right: 11 12 13 14 15 16 17 29
simple_exp (40)
    on left: 23 24 25, on right: 19 20 21 22 23 24
term (41)
    on left: 26 27 28, on right: 23 24 25 26 27
factor (42)
    on left: 29 30 31, on right: 26 27 28


state 0

    0 $accept: . program $end

    IF      shift, and go to state 1
    REPEAT  shift, and go to state 2
    SCAN    shift, and go to state 3
    PRINT   shift, and go to state 4
    ID      shift, and go to state 5
    FOR     shift, and go to state 6
    WHILE   shift, and go to state 7

    program      go to state 8
    stmt_seq     go to state 9
    stmt         go to state 10
    if_stmt      go to state 11
    repeat_stmt  go to state 12
    for_stmt     go to state 13
    while_stmt   go to state 14
    write_stmt   go to state 15
    assign_stmt  go to state 16
    read_stmt    go to state 17


state 1

   11 if_stmt: IF . exp stmt_seq END
   12        | IF . exp stmt_seq ELSE stmt_seq END

    ID   shift, and go to state 18
    NUM  shift, and go to state 19
    '('  shift, and go to state 20

    exp         go to state 21
    simple_exp  go to state 22
    term        go to state 23
    factor      go to state 24


state 2

   13 repeat_stmt: REPEAT . stmt_seq UNTIL '(' exp ')'

    IF      shift, and go to state 1
    REPEAT  shift, and go to state 2
    SCAN    shift, and go to state 3
    PRINT   shift, and go to state 4
    ID      shift, and go to state 5
    FOR     shift, and go to state 6
    WHILE   shift, and go to state 7

    stmt_seq     go to state 25
    stmt         go to state 10
    if_stmt      go to state 11
    repeat_stmt  go to state 12
    for_stmt     go to state 13
    while_stmt   go to state 14
    write_stmt   go to state 15
    assign_stmt  go to state 16
    read_stmt    go to state 17


state 3

   18 read_stmt: SCAN . '(' ID ')'

    '('  shift, and go to state 26


state 4

   16 write_stmt: PRINT . '(' exp ')'

    '('  shift, and go to state 27


state 5

   17 assign_stmt: ID . '=' exp

    '='  shift, and go to state 28


state 6

   14 for_stmt: FOR . '(' assign_stmt ',' exp ',' assign_stmt ')' stmt_seq END

    '('  shift, and go to state 29


state 7

   15 while_stmt: WHILE . '(' exp ')' stmt_seq END

    '('  shift, and go to state 30


state 8

    0 $accept: program . $end

    $end  shift, and go to state 31


state 9

    1 program: stmt_seq .
    2 stmt_seq: stmt_seq . stmt ';'

    IF      shift, and go to state 1
    REPEAT  shift, and go to state 2
    SCAN    shift, and go to state 3
    PRINT   shift, and go to state 4
    ID      shift, and go to state 5
    FOR     shift, and go to state 6
    WHILE   shift, and go to state 7

    $default  reduce using rule 1 (program)

    stmt         go to state 32
    if_stmt      go to state 11
    repeat_stmt  go to state 12
    for_stmt     go to state 13
    while_stmt   go to state 14
    write_stmt   go to state 15
    assign_stmt  go to state 16
    read_stmt    go to state 17


state 10

    3 stmt_seq: stmt . ';'

    ';'  shift, and go to state 33


state 11

    4 stmt: if_stmt .

    $default  reduce using rule 4 (stmt)


state 12

    5 stmt: repeat_stmt .

    $default  reduce using rule 5 (stmt)


state 13

    9 stmt: for_stmt .

    $default  reduce using rule 9 (stmt)


state 14

   10 stmt: while_stmt .

    $default  reduce using rule 10 (stmt)


state 15

    8 stmt: write_stmt .

    $default  reduce using rule 8 (stmt)


state 16

    6 stmt: assign_stmt .

    $default  reduce using rule 6 (stmt)


state 17

    7 stmt: read_stmt .

    $default  reduce using rule 7 (stmt)


state 18

   31 factor: ID .

    $default  reduce using rule 31 (factor)


state 19

   30 factor: NUM .

    $default  reduce using rule 30 (factor)


state 20

   29 factor: '(' . exp ')'

    ID   shift, and go to state 18
    NUM  shift, and go to state 19
    '('  shift, and go to state 20

    exp         go to state 34
    simple_exp  go to state 22
    term        go to state 23
    factor      go to state 24


state 21

   11 if_stmt: IF exp . stmt_seq END
   12        | IF exp . stmt_seq ELSE stmt_seq END

    IF      shift, and go to state 1
    REPEAT  shift, and go to state 2
    SCAN    shift, and go to state 3
    PRINT   shift, and go to state 4
    ID      shift, and go to state 5
    FOR     shift, and go to state 6
    WHILE   shift, and go to state 7

    stmt_seq     go to state 35
    stmt         go to state 10
    if_stmt      go to state 11
    repeat_stmt  go to state 12
    for_stmt     go to state 13
    while_stmt   go to state 14
    write_stmt   go to state 15
    assign_stmt  go to state 16
    read_stmt    go to state 17


state 22

   19 exp: simple_exp . '<' simple_exp
   20    | simple_exp . '>' simple_exp
   21    | simple_exp . EQUAL simple_exp
   22    | simple_exp .
   23 simple_exp: simple_exp . '+' term
   24           | simple_exp . '-' term

    EQUAL  shift, and go to state 36
    '<'    shift, and go to state 37
    '>'    shift, and go to state 38
    '+'    shift, and go to state 39
    '-'    shift, and go to state 40

    $default  reduce using rule 22 (exp)


state 23

   25 simple_exp: term .
   26 term: term . '*' factor
   27     | term . '/' factor

    '*'  shift, and go to state 41
    '/'  shift, and go to state 42

    $default  reduce using rule 25 (simple_exp)


state 24

   28 term: factor .

    $default  reduce using rule 28 (term)


state 25

    2 stmt_seq: stmt_seq . stmt ';'
   13 repeat_stmt: REPEAT stmt_seq . UNTIL '(' exp ')'

    IF      shift, and go to state 1
    REPEAT  shift, and go to state 2
    UNTIL   shift, and go to state 43
    SCAN    shift, and go to state 3
    PRINT   shift, and go to state 4
    ID      shift, and go to state 5
    FOR     shift, and go to state 6
    WHILE   shift, and go to state 7

    stmt         go to state 32
    if_stmt      go to state 11
    repeat_stmt  go to state 12
    for_stmt     go to state 13
    while_stmt   go to state 14
    write_stmt   go to state 15
    assign_stmt  go to state 16
    read_stmt    go to state 17


state 26

   18 read_stmt: SCAN '(' . ID ')'

    ID  shift, and go to state 44


state 27

   16 write_stmt: PRINT '(' . exp ')'

    ID   shift, and go to state 18
    NUM  shift, and go to state 19
    '('  shift, and go to state 20

    exp         go to state 45
    simple_exp  go to state 22
    term        go to state 23
    factor      go to state 24


state 28

   17 assign_stmt: ID '=' . exp

    ID   shift, and go to state 18
    NUM  shift, and go to state 19
    '('  shift, and go to state 20

    exp         go to state 46
    simple_exp  go to state 22
    term        go to state 23
    factor      go to state 24


state 29

   14 for_stmt: FOR '(' . assign_stmt ',' exp ',' assign_stmt ')' stmt_seq END

    ID  shift, and go to state 5

    assign_stmt  go to state 47


state 30

   15 while_stmt: WHILE '(' . exp ')' stmt_seq END

    ID   shift, and go to state 18
    NUM  shift, and go to state 19
    '('  shift, and go to state 20

    exp         go to state 48
    simple_exp  go to state 22
    term        go to state 23
    factor      go to state 24


state 31

    0 $accept: program $end .

    $default  accept


state 32

    2 stmt_seq: stmt_seq stmt . ';'

    ';'  shift, and go to state 49


state 33

    3 stmt_seq: stmt ';' .

    $default  reduce using rule 3 (stmt_seq)


state 34

   29 factor: '(' exp . ')'

    ')'  shift, and go to state 50


state 35

    2 stmt_seq: stmt_seq . stmt ';'
   11 if_stmt: IF exp stmt_seq . END
   12        | IF exp stmt_seq . ELSE stmt_seq END

    IF      shift, and go to state 1
    ELSE    shift, and go to state 51
    END     shift, and go to state 52
    REPEAT  shift, and go to state 2
    SCAN    shift, and go to state 3
    PRINT   shift, and go to state 4
    ID      shift, and go to state 5
    FOR     shift, and go to state 6
    WHILE   shift, and go to state 7

    stmt         go to state 32
    if_stmt      go to state 11
    repeat_stmt  go to state 12
    for_stmt     go to state 13
    while_stmt   go to state 14
    write_stmt   go to state 15
    assign_stmt  go to state 16
    read_stmt    go to state 17


state 36

   21 exp: simple_exp EQUAL . simple_exp

    ID   shift, and go to state 18
    NUM  shift, and go to state 19
    '('  shift, and go to state 20

    simple_exp  go to state 53
    term        go to state 23
    factor      go to state 24


state 37

   19 exp: simple_exp '<' . simple_exp

    ID   shift, and go to state 18
    NUM  shift, and go to state 19
    '('  shift, and go to state 20

    simple_exp  go to state 54
    term        go to state 23
    factor      go to state 24


state 38

   20 exp: simple_exp '>' . simple_exp

    ID   shift, and go to state 18
    NUM  shift, and go to state 19
    '('  shift, and go to state 20

    simple_exp  go to state 55
    term        go to state 23
    factor      go to state 24


state 39

   23 simple_exp: simple_exp '+' . term

    ID   shift, and go to state 18
    NUM  shift, and go to state 19
    '('  shift, and go to state 20

    term    go to state 56
    factor  go to state 24


state 40

   24 simple_exp: simple_exp '-' . term

    ID   shift, and go to state 18
    NUM  shift, and go to state 19
    '('  shift, and go to state 20

    term    go to state 57
    factor  go to state 24


state 41

   26 term: term '*' . factor

    ID   shift, and go to state 18
    NUM  shift, and go to state 19
    '('  shift, and go to state 20

    factor  go to state 58


state 42

   27 term: term '/' . factor

    ID   shift, and go to state 18
    NUM  shift, and go to state 19
    '('  shift, and go to state 20

    factor  go to state 59


state 43

   13 repeat_stmt: REPEAT stmt_seq UNTIL . '(' exp ')'

    '('  shift, and go to state 60


state 44

   18 read_stmt: SCAN '(' ID . ')'

    ')'  shift, and go to state 61


state 45

   16 write_stmt: PRINT '(' exp . ')'

    ')'  shift, and go to state 62


state 46

   17 assign_stmt: ID '=' exp .

    $default  reduce using rule 17 (assign_stmt)


state 47

   14 for_stmt: FOR '(' assign_stmt . ',' exp ',' assign_stmt ')' stmt_seq END

    ','  shift, and go to state 63


state 48

   15 while_stmt: WHILE '(' exp . ')' stmt_seq END

    ')'  shift, and go to state 64


state 49

    2 stmt_seq: stmt_seq stmt ';' .

    $default  reduce using rule 2 (stmt_seq)


state 50

   29 factor: '(' exp ')' .

    $default  reduce using rule 29 (factor)


state 51

   12 if_stmt: IF exp stmt_seq ELSE . stmt_seq END

    IF      shift, and go to state 1
    REPEAT  shift, and go to state 2
    SCAN    shift, and go to state 3
    PRINT   shift, and go to state 4
    ID      shift, and go to state 5
    FOR     shift, and go to state 6
    WHILE   shift, and go to state 7

    stmt_seq     go to state 65
    stmt         go to state 10
    if_stmt      go to state 11
    repeat_stmt  go to state 12
    for_stmt     go to state 13
    while_stmt   go to state 14
    write_stmt   go to state 15
    assign_stmt  go to state 16
    read_stmt    go to state 17


state 52

   11 if_stmt: IF exp stmt_seq END .

    $default  reduce using rule 11 (if_stmt)


state 53

   21 exp: simple_exp EQUAL simple_exp .
   23 simple_exp: simple_exp . '+' term
   24           | simple_exp . '-' term

    '+'  shift, and go to state 39
    '-'  shift, and go to state 40

    $default  reduce using rule 21 (exp)


state 54

   19 exp: simple_exp '<' simple_exp .
   23 simple_exp: simple_exp . '+' term
   24           | simple_exp . '-' term

    '+'  shift, and go to state 39
    '-'  shift, and go to state 40

    $default  reduce using rule 19 (exp)


state 55

   20 exp: simple_exp '>' simple_exp .
   23 simple_exp: simple_exp . '+' term
   24           | simple_exp . '-' term

    '+'  shift, and go to state 39
    '-'  shift, and go to state 40

    $default  reduce using rule 20 (exp)


state 56

   23 simple_exp: simple_exp '+' term .
   26 term: term . '*' factor
   27     | term . '/' factor

    '*'  shift, and go to state 41
    '/'  shift, and go to state 42

    $default  reduce using rule 23 (simple_exp)


state 57

   24 simple_exp: simple_exp '-' term .
   26 term: term . '*' factor
   27     | term . '/' factor

    '*'  shift, and go to state 41
    '/'  shift, and go to state 42

    $default  reduce using rule 24 (simple_exp)


state 58

   26 term: term '*' factor .

    $default  reduce using rule 26 (term)


state 59

   27 term: term '/' factor .

    $default  reduce using rule 27 (term)


state 60

   13 repeat_stmt: REPEAT stmt_seq UNTIL '(' . exp ')'

    ID   shift, and go to state 18
    NUM  shift, and go to state 19
    '('  shift, and go to state 20

    exp         go to state 66
    simple_exp  go to state 22
    term        go to state 23
    factor      go to state 24


state 61

   18 read_stmt: SCAN '(' ID ')' .

    $default  reduce using rule 18 (read_stmt)


state 62

   16 write_stmt: PRINT '(' exp ')' .

    $default  reduce using rule 16 (write_stmt)


state 63

   14 for_stmt: FOR '(' assign_stmt ',' . exp ',' assign_stmt ')' stmt_seq END

    ID   shift, and go to state 18
    NUM  shift, and go to state 19
    '('  shift, and go to state 20

    exp         go to state 67
    simple_exp  go to state 22
    term        go to state 23
    factor      go to state 24


state 64

   15 while_stmt: WHILE '(' exp ')' . stmt_seq END

    IF      shift, and go to state 1
    REPEAT  shift, and go to state 2
    SCAN    shift, and go to state 3
    PRINT   shift, and go to state 4
    ID      shift, and go to state 5
    FOR     shift, and go to state 6
    WHILE   shift, and go to state 7

    stmt_seq     go to state 68
    stmt         go to state 10
    if_stmt      go to state 11
    repeat_stmt  go to state 12
    for_stmt     go to state 13
    while_stmt   go to state 14
    write_stmt   go to state 15
    assign_stmt  go to state 16
    read_stmt    go to state 17


state 65

    2 stmt_seq: stmt_seq . stmt ';'
   12 if_stmt: IF exp stmt_seq ELSE stmt_seq . END

    IF      shift, and go to state 1
    END     shift, and go to state 69
    REPEAT  shift, and go to state 2
    SCAN    shift, and go to state 3
    PRINT   shift, and go to state 4
    ID      shift, and go to state 5
    FOR     shift, and go to state 6
    WHILE   shift, and go to state 7

    stmt         go to state 32
    if_stmt      go to state 11
    repeat_stmt  go to state 12
    for_stmt     go to state 13
    while_stmt   go to state 14
    write_stmt   go to state 15
    assign_stmt  go to state 16
    read_stmt    go to state 17


state 66

   13 repeat_stmt: REPEAT stmt_seq UNTIL '(' exp . ')'

    ')'  shift, and go to state 70


state 67

   14 for_stmt: FOR '(' assign_stmt ',' exp . ',' assign_stmt ')' stmt_seq END

    ','  shift, and go to state 71


state 68

    2 stmt_seq: stmt_seq . stmt ';'
   15 while_stmt: WHILE '(' exp ')' stmt_seq . END

    IF      shift, and go to state 1
    END     shift, and go to state 72
    REPEAT  shift, and go to state 2
    SCAN    shift, and go to state 3
    PRINT   shift, and go to state 4
    ID      shift, and go to state 5
    FOR     shift, and go to state 6
    WHILE   shift, and go to state 7

    stmt         go to state 32
    if_stmt      go to state 11
    repeat_stmt  go to state 12
    for_stmt     go to state 13
    while_stmt   go to state 14
    write_stmt   go to state 15
    assign_stmt  go to state 16
    read_stmt    go to state 17


state 69

   12 if_stmt: IF exp stmt_seq ELSE stmt_seq END .

    $default  reduce using rule 12 (if_stmt)


state 70

   13 repeat_stmt: REPEAT stmt_seq UNTIL '(' exp ')' .

    $default  reduce using rule 13 (repeat_stmt)


state 71

   14 for_stmt: FOR '(' assign_stmt ',' exp ',' . assign_stmt ')' stmt_seq END

    ID  shift, and go to state 5

    assign_stmt  go to state 73


state 72

   15 while_stmt: WHILE '(' exp ')' stmt_seq END .

    $default  reduce using rule 15 (while_stmt)


state 73

   14 for_stmt: FOR '(' assign_stmt ',' exp ',' assign_stmt . ')' stmt_seq END

    ')'  shift, and go to state 74


state 74

   14 for_stmt: FOR '(' assign_stmt ',' exp ',' assign_stmt ')' . stmt_seq END

    IF      shift, and go to state 1
    REPEAT  shift, and go to state 2
    SCAN    shift, and go to state 3
    PRINT   shift, and go to state 4
    ID      shift, and go to state 5
    FOR     shift, and go to state 6
    WHILE   shift, and go to state 7

    stmt_seq     go to state 75
    stmt         go to state 10
    if_stmt      go to state 11
    repeat_stmt  go to state 12
    for_stmt     go to state 13
    while_stmt   go to state 14
    write_stmt   go to state 15
    assign_stmt  go to state 16
    read_stmt    go to state 17


state 75

    2 stmt_seq: stmt_seq . stmt ';'
   14 for_stmt: FOR '(' assign_stmt ',' exp ',' assign_stmt ')' stmt_seq . END

    IF      shift, and go to state 1
    END     shift, and go to state 76
    REPEAT  shift, and go to state 2
    SCAN    shift, and go to state 3
    PRINT   shift, and go to state 4
    ID      shift, and go to state 5
    FOR     shift, and go to state 6
    WHILE   shift, and go to state 7

    stmt         go to state 32
    if_stmt      go to state 11
    repeat_stmt  go to state 12
    for_stmt     go to state 13
    while_stmt   go to state 14
    write_stmt   go to state 15
    assign_stmt  go to state 16
    read_stmt    go to state 17


state 76

   14 for_stmt: FOR '(' assign_stmt ',' exp ',' assign_stmt ')' stmt_seq END .

    $default  reduce using rule 14 (for_stmt)
