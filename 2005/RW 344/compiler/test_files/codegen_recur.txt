(*
This tests if you implemented your stack correctly by recursively calling 
a procedure until your stack overflows. It generates and prints Fibonacci Numbers.
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\

Output I got (which seems correct):
0
1
1
2
3
5
8
13
21
34
55
89
144
233
377
610
987
1597
2584
4181
6765
10946
17711
28657
46368
75025
121393
196418
317811
514229
832040
1346269
2178309
3524578
5702887
9227465
14930352
24157817
39088169
63245986
102334155
165580141
267914296
433494437
701408733
1134903170
1836311903
-1323752223		<-- Numbers start to overflow
512559680
-811192543
-298632863
-1109825406
-1408458269
1776683621
368225352
..... Lots More Numbers .....
1818549533
1182303362
Error: Invalid Opcode!		<-- Stack overflow!

*)

begin
	integer x,y;
	proc func
	begin
		integer z;
		proc assign
		begin
			x := y;
		end;
		z := x + y;
		assign;
		y := z;
		write z;
		func;
	end;

	x := 0;
	y := 1;

	write x;
	write y;

	func;
end.

