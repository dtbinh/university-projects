<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0056)http://www.cs.sun.ac.za/~eloff/rw314/doc_BootLinker.html -->
<HTML><HEAD><TITLE>Computer Science 314</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1"><LINK 
media=screen href="oberon linker_files/style.css" type=text/css rel=stylesheet>
<META content="MSHTML 6.00.2800.1479" name=GENERATOR></HEAD>
<BODY bgColor=#ffffff background="">
<H1 align=left>The Oberon Linker</H1>The Oberon linker (<CODE>BootLinker</CODE>) 
is used to create a statically linked image of a module or group of modules. The 
core of the Native Oberon system is an example of such an image and typically 
contains the kernel and some basic device drivers to access IDE or SCSI device 
controllers. 
<H2 align=left>Linking</H2>The linker is invoked by executing the command 
<CODE>BootLinker.Link</CODE>, followed by a list of parameters. The parameters 
typically contain the modules that must be linked and the base address used to 
patch memory references inside the various modules being linked. Here is an 
example of a typical link operation: <PRE>BootLinker.Link MyImage
  \new Kernel.NewRec \sysnew Kernel.NewSys \newarr Kernel.NewArr
  \list Kernel.Modules
  \command MyModule.Go
  \integrate 20000000H Kernel MyModule ~
      </PRE>
<H2 align=left>Parameters</H2>The various parameters accepted by the BootLinker 
are listed in the table below. Note that the parameters are described using the 
following EBNF definition: 
<UL>
  <LI>commandsyntax = "BootLinker.Link" Output-file {option} linkspec "~" 
  <LI>option = "\command" qualident | "\new" qualident | "\newarr" qualident" | 
  "\sysnew" qualident | "\mdesc" qualident | "expdesc" qualident" | "\refs" 
  <LI>linkspec = "\integrate" Link-address Module {Module} 
  <LI>qualident = identifier "." identifier 
  <LI>identifier = letter {letter | digit} </LI></UL>
<TABLE cellSpacing=2 cellPadding=3 width="100%" border=0>
  <TBODY>
  <TR>
    <TH align=middle width="10%" bgColor=#c0c0c0>Parameter</TH>
    <TH align=middle width="60%" bgColor=#c0c0c0>Description</TH>
    <TH align=middle width="30%" bgColor=#c0c0c0>Example</TH></TR>
  <TR>
    <TD align=left bgColor=#ded5d3>\command</TD>
    <TD align=left bgColor=#ded5d3>Specifies a command that will be executed 
      once all the initialization code of the various modules have been 
      executed. When this option is used, the initialization code of the last 
      module does not have to constitute the system's entry point. Note that in 
      Oberon the command is the unit of execution and is defined as any exported 
      proper procedure that does not contain parameters. </TD>
    <TD align=left bgColor=#ded5d3><CODE>\command MyModule.Go</CODE></TD></TR>
  <TR>
    <TD align=left bgColor=#ded5d3>linkspec</TD>
    <TD align=left bgColor=#ded5d3>This parameter specifies the physical base 
      address that will be used to update all the memory references. It is 
      assumed that the image will be loaded in memory at the specified link 
      address. Note that the link address is specified in hexadecimal. 
      <P>The list of module names that must be linked in the image follows the 
      link address and at least one module must be specified. The modules must 
      be listed in the correct order. For example, if module <CODE>M1</CODE> 
      imports module <CODE>M2</CODE>, then <CODE>M2</CODE> must be listed before 
      <CODE>M1</CODE>. Do not list modules that will result in a circular 
      import. </P></TD>
    <TD align=left bgColor=#ded5d3><CODE>\integrate 20000H Kernel 
      MyModule</CODE></TD></TR>
  <TR>
    <TD align=left bgColor=#ded5d3>\list</TD>
    <TD align=left bgColor=#ded5d3>This parameter specifies the head of the 
      linked list of modules. The linked list is traversed during execution of 
      the static image to ensure that the initialization code (main body) of 
      every module is executed. The default value for this option is 
      <CODE>Kernel.modules</CODE> and will be used if this option is omitted. 
</TD>
    <TD align=left bgColor=#ded5d3><CODE>\list MyModule.modules</CODE></TD></TR>
  <TR>
    <TD align=left bgColor=#ded5d3>\mdesc</TD>
    <TD align=left bgColor=#ded5d3>This parameter specifies the name of the 
      data structure describing the physical structure of a module. This data 
      structure is required by the linker to understand the format of a module 
      and assists the linker in obtaining various internal structures. The 
      default value for this option is <CODE>Kernel.ModuleDesc</CODE> and will 
      be used if this option is omitted. </TD>
    <TD align=left bgColor=#ded5d3><CODE>\mdesc MyModule.mdesc</CODE></TD></TR>
  <TR>
    <TD align=left bgColor=#ded5d3>\expdesc</TD>
    <TD align=left bgColor=#ded5d3>This parameter specifies the name of the 
      data structure used to described exported entities such as procedures and 
      variables. The default value for this option is 
      <CODE>Kernel.ExpDesc</CODE> and will be used if this option is omitted. 
</TD>
    <TD align=left bgColor=#ded5d3><CODE>\expdesc 
MyModule.ExpDesc</CODE></TD></TR>
  <TR>
    <TD align=left bgColor=#ded5d3>\new</TD>
    <TD align=left bgColor=#ded5d3>Specifies the procedure linked to calls of 
      the built-in <CODE>NEW</CODE> procedure of the Oberon language. The 
      procedure associated with this option is used when memory must be 
      allocated for a record. The default value for this option is 
      <CODE>Kernel.NewRec</CODE> and will be used if this option is omitted. </TD>
    <TD align=left bgColor=#ded5d3><CODE>\new MyModule.NewRec</CODE></TD></TR>
  <TR>
    <TD align=left bgColor=#ded5d3>\newarr</TD>
    <TD align=left bgColor=#ded5d3>Specifies the procedure linked to calls of 
      the built-in <CODE>NEW</CODE> procedure of the Oberon language. The 
      procedure associated with this option is used when memory must be 
      allocated for dynamic arrays. The default value for this option is 
      <CODE>Kernel.NewArr</CODE> and will be used if this option is omitted. </TD>
    <TD align=left bgColor=#ded5d3><CODE>\newarr MyModule.NewArr</CODE></TD></TR>
  <TR>
    <TD align=left bgColor=#ded5d3>\refs</TD>
    <TD align=left bgColor=#ded5d3>This parameter instructs the linker to 
      include the reference section of every module in the static image. </TD>
    <TD align=left bgColor=#ded5d3><CODE>\refs</CODE></TD></TR>
  <TR>
    <TD align=left bgColor=#ded5d3>\sysnew</TD>
    <TD align=left bgColor=#ded5d3>Specifies the procedure linked to calls of 
      the built-in <CODE>NEW</CODE> procedure of the Oberon language. The 
      procedure associated with this option is used when memory must be 
      allocated using the <CODE>SYSTEM.NEW</CODE> procedure. The default value 
      for this option is <CODE>Kernel.NewSys</CODE> and will be used if this 
      option is omitted. </TD>
    <TD align=left bgColor=#ded5d3><CODE>\sysnew 
  MyModule.NewRec</CODE></TD></TR></TBODY></TABLE>
<H2 align=left>Debugging</H2>The linker creates a special log file everytime the 
<CODE>BootLinker.Link</CODE> command is successfully executed. The name of the 
log file is the same as the output file, except that it is followed by a 
<CODE>.Link</CODE> extension. Errors that occur during the execution of the 
linked image at runtime can be located by using the <CODE>BootLinker.Find</CODE> 
command. The location of the error can be obtained as follows: 
<OL>
  <LI>Determine the address of the instruction that generated the error 
  (<CODE>EIP</CODE> register). 
  <LI>Select the address and execute the command <CODE>BootLinker.Find 
  MyImage.Link</CODE> &#8593; (assuming that the statically linked image previously 
  generated was named <CODE>MyImage</CODE>). Make sure that the address is 
  specified in hexadecimal (terminated with "H"). If the command executed 
  successfully, the linker will return a module name and program counter value. 
  <LI>Select the program counter and compile the module using the 
  <CODE>\f</CODE> option. </LI></OL>
<H2 align=left>Image Structure</H2>The linked image contains a special header at 
the beginning of the image that is used to store additional information that may 
be required during runtime. Note that the offset is relative to the link base of 
the image. 
<TABLE cellSpacing=2 cellPadding=3 width="100%" border=0>
  <TBODY>
  <TR>
    <TH align=middle width="20%" bgColor=#c0c0c0>Offset in decimal</TH>
    <TH align=middle width="20%" bgColor=#c0c0c0>Value</TH>
    <TH align=middle width="40%" bgColor=#c0c0c0>Description</TH>
    <TH align=middle width="20%" bgColor=#c0c0c0>Size (bytes)</TH></TR>
  <TR>
    <TD align=left bgColor=#ded5d3>0</TD>
    <TD align=left bgColor=#ded5d3><CODE>E8</CODE></TD>
    <TD align=left bgColor=#ded5d3>Machine code for <CODE>JMP</CODE> 
      instruction. The jump instruction will transfer control to the entry point 
      of the image.</TD>
    <TD align=left bgColor=#ded5d3>1</TD></TR>
  <TR>
    <TD align=left bgColor=#ded5d3>6</TD>
    <TD align=left bgColor=#ded5d3>?</TD>
    <TD align=left bgColor=#ded5d3>This field contains the base address value 
      that was specified as part of the linkspec parameter. 
    <TD align=left bgColor=#ded5d3>4</TD></TR>
  <TR>
    <TD align=left bgColor=#ded5d3>22</TD>
    <TD align=left bgColor=#ded5d3>?</TD>
    <TD align=left bgColor=#ded5d3>Heap start address. This value contains the 
      address of the first byte following the image. Subtracting the link base 
      field and heap start field yields the size of the linked image.</TD>
    <TD align=left bgColor=#ded5d3>4</TD></TR></TBODY></TABLE>
<HR>

<ADDRESS>Page developed by <A href="mailto:eloff@cs.sun.ac.za">Jacques 
Eloff</A><BR>Last updated: 10.02.2004 </ADDRESS></BODY></HTML>
