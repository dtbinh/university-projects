<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0050)http://www.cs.sun.ac.za/~eloff/rw314/doc_8253.html -->
<HTML><HEAD><TITLE>Computer Science 314 - 8253 Timer</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1"><LINK 
media=screen href="Computer Science 314 - 8253 Timer_files/style.css" 
type=text/css rel=stylesheet>
<META content="MSHTML 6.00.2800.1479" name=GENERATOR></HEAD>
<BODY bgColor=#ffffff background="">
<H1 align=left>The 8253 Timer</H1>
<H2>Introduction</H2>The PC uses the Intel 8253 timer chip to perform various 
timing and counting functions. The timer consists out of three counters called 
channels. Each channel can be programmed to operate in one of six modes. Once 
programmed, the channels can perform their tasks simultaneously. The timer is 
usually assigned to IRQ-0 (highest priority hardware interrupt) because of the 
critical function it performs and because so many devices depend on it. There 
are many uses for the timer within an operating or dedicated system: 
<UL>
  <LI>Systems can use the timer to keep track of the current time of day. 
  <LI>Timers can be used to wait for a specific amount of time before continuing 
  with other operations. This is often necessary when programming complex 
  devices that require a certain amount of time to react to specific commands. 
  <LI>Operating systems such as Unix depend on the system clock and use it to 
  determine when a time slice for a process has expired so that another process 
  may be selected by the scheduler. </LI></UL>
<H2>The 8253's Channels</H2>Each channel contains a 16-bit latch register and 
16-bit counter. Once the latch register is loaded, the value is transfered by 
the controller to the counter register associated with the channel. Each channel 
is tied to a <B>1.19318</B> MHz clock pulse. After every pulse, the counter 
associated with the channel is decremented by one. Once the counter reaches 
zero, the channel generates an interrupt signal on its output line. The way in 
which these operations occur depends on the selected mode. The latch registers 
of the timer channels (0,1 and 2) can be accessed through I/O ports <B>40H</B>, 
<B>41H</B> and <B>42H</B> respectively. 
<P>Most of the channels are allocated to predefined functions by the BIOS during 
the initialization of the system at boot time. Channel 0 is normally tied to 
IRQ-0 and usually control the internal timing functions of the BIOS through the 
handler installed at interrupt vector 08h (such as the current time of day). 
Channel 1 is used to perform periodic DMA memory refresh operations and should 
not be used for timing operations. Channel 2 is tied to the PC's internal 
speaker and used to generate sound. 
<H2>Programming the 8253</H2>Before any of the channels can be programmed, a 
command must be sent to the timer through the command register at I/O port 
<B>43H</B>. The format of the command byte is as follows: 
<H5>Command Register (Port 43H)</H5>
<TABLE cellSpacing=2 width="50%" border=0>
  <TBODY>
  <TR>
    <TD align=middle bgColor=#c0c0c0>7</TD>
    <TD align=middle bgColor=#c0c0c0>6</TD>
    <TD align=middle bgColor=#c0c0c0>5</TD>
    <TD align=middle bgColor=#c0c0c0>4</TD>
    <TD align=middle bgColor=#c0c0c0 colSpan=3>3 2 1</TD>
    <TD align=middle bgColor=#c0c0c0>0</TD></TR>
  <TR>
    <TD align=middle bgColor=#ded5d3>SC1</TD>
    <TD align=middle bgColor=#ded5d3>SC0</TD>
    <TD align=middle bgColor=#ded5d3>SL1</TD>
    <TD align=middle bgColor=#ded5d3>SL0</TD>
    <TD align=middle bgColor=#ded5d3 colSpan=3>MODE</TD>
    <TD align=middle bgColor=#ded5d3>BCD</TD></TR></TBODY></TABLE>
<P>
<UL>
  <LI>SC1 and SC0 is used for channel selection. 
  <TABLE cellSpacing=2 width="30%" border=0>
    <TBODY>
    <TR>
      <TD align=middle bgColor=#c0c0c0>SC1</TD>
      <TD align=middle bgColor=#c0c0c0>SC0</TD>
      <TD align=middle bgColor=#c0c0c0>Result</TD></TR>
    <TR>
      <TD align=middle bgColor=#ded5d3>0</TD>
      <TD align=middle bgColor=#ded5d3>0</TD>
      <TD align=middle bgColor=#ded5d3>Channel 0</TD></TR>
    <TR>
      <TD align=middle bgColor=#ded5d3>0</TD>
      <TD align=middle bgColor=#ded5d3>1</TD>
      <TD align=middle bgColor=#ded5d3>Channel 1</TD></TR>
    <TR>
      <TD align=middle bgColor=#ded5d3>1</TD>
      <TD align=middle bgColor=#ded5d3>0</TD>
      <TD align=middle bgColor=#ded5d3>Channel 2</TD></TR></TBODY></TABLE>
  <LI>SL1 and SL0 selects whether a store (write) or load (read) operation will 
  be performed on the LSB, MSB or both the LSB and MSB of the counter register. 
  Remember that the I/O port associated with the timer is only 8 bits wide, but 
  the counter register is 16-bits wide. A <CODE>SYSTEM.PORTIN</CODE> instruction 
  will result in a read operation, while <CODE>SYSTEM.PORTOUT</CODE> is 
  considered as a write operation. 
  <TABLE cellSpacing=2 width="30%" border=0>
    <TBODY>
    <TR>
      <TD align=middle bgColor=#c0c0c0>SL1</TD>
      <TD align=middle bgColor=#c0c0c0>SL0</TD>
      <TD align=middle bgColor=#c0c0c0>Result</TD></TR>
    <TR>
      <TD align=middle bgColor=#ded5d3>0</TD>
      <TD align=middle bgColor=#ded5d3>0</TD>
      <TD align=middle bgColor=#ded5d3>Latch present counter value</TD></TR>
    <TR>
      <TD align=middle bgColor=#ded5d3>0</TD>
      <TD align=middle bgColor=#ded5d3>1</TD>
      <TD align=middle bgColor=#ded5d3>Read/Write MSB only</TD></TR>
    <TR>
      <TD align=middle bgColor=#ded5d3>1</TD>
      <TD align=middle bgColor=#ded5d3>0</TD>
      <TD align=middle bgColor=#ded5d3>Read/Write LSB only</TD></TR>
    <TR>
      <TD align=middle bgColor=#ded5d3>1</TD>
      <TD align=middle bgColor=#ded5d3>1</TD>
      <TD align=middle bgColor=#ded5d3>Read/Write LSB, then 
  MSB</TD></TR></TBODY></TABLE>
  <LI>The MODE field selects the mode for the channel (000..101 Mode 0..Mode 5). 

  <LI>If BCD is set (BCD=1), then the counter will decrement in BCD rather than 
  binary. </LI></UL>
<H2>Rate Selection</H2>As mentioned earlier, the counter registers are tied to a 
clock pulse generated at a frequency of 1.19318 MHz. The rate at which the timer 
will generate interrupts can therefore be programmed by selecting a suitable 
value and loading the counter through the latch register. For example, the BIOS 
clock interrupt is generated 18.2 times every second. The reason for this is 
that the BIOS loads the counter of channel 0 with a value of 0. Loading the 
counter with a value of 0 sets the maximum number of decrement operations 
(65536) before the counter reaches 0 again. Dividing the frequency of the pulse 
by the counter register will yield an estimate on how many interrupts will be 
generated per second: 
<UL>
  <LI>1.19318 MHz * 1000000 = 1193180 Hz 
  <LI>1193180 / 65536 = 18.2 
  <LI>1/18.2 = 0.0549 seconds or roughly every 55ms </LI></UL>
<P>
<H2>Further Reading</H2>
<UL>
  <LI><I>The Undocumented PC</I>, Frank van Gilluwe, Addison Wesley, 1997. 
</LI></UL>
<HR>

<ADDRESS>Page developed by <A href="mailto:eloff@cs.sun.ac.za">Jacques 
Eloff</A><BR>Last updated: 25.02.2004 </ADDRESS></BODY></HTML>
