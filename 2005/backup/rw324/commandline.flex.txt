%{
	/* Define some boolean values */
	#define TRUE 	1
	#define FALSE	0
	/* Flags to keep track of classpath arguments */
	short int isCpEnable, hasCpArgs;
%}


%s FNAME


%%

"java"[ \t]*"\n"	{ /* No arguments supplied */ printf( "Usage\n" ); return; }
"java"			printf( "\n" );
"-hotspot"		{ printf( "Option: hotspot enable\n" ); }
"-cp"[ ]* |
"-classpath"[ ]*	{ printf( "Option: classpath\t" ); BEGIN FNAME; isCpEnable = TRUE;}
<FNAME>[^ \n]+		{ printf( "Value: %s\n", yytext ); BEGIN INITIAL; hasCpArgs = TRUE; }
"-version"		printf( "Option: version selected\n" );
"-help"	|
"-?"			printf( "Option: help enable\n" );
"\n"			return;
[^ \n\t]+		printf( "File argument: %s\n", yytext );


%%
int main()
{
	/* Initialize variables */
	isCpEnable = FALSE;
	hasCpArgs = FALSE;

	/* Do the scanning */
	yylex();

	/* Print some error messages if necessary */
	if( isCpEnable && !hasCpArgs )
	{
		printf( "No valid classpath specified\n" );
	}

	printf( "\n" );
	return EXIT_SUCCESS;
}