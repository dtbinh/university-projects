\documentclass[a4paper,11pt,titlepage]{article}
\usepackage{graphicx}
\author{Abrie Greeff\\B.Sc Hons (Computer Science)\\Department of Computer Science\\University of Stellenbosch}
\title{Self Organising Maps}
\begin{document}
\maketitle
\tableofcontents

\section{Question 1}
This application was developed in Java. The assumption was made that the sample data would always be three-dimensional. This enabled me to use the sample data as a colour vector. Colour vectors consist of three components the red, green and blue intensity values.

When a weight was chosen to be nearest to a randomly chosen sample, the Euclidean distance was computed to determine the nearest weight. A Gaussian function as in \cite{web1} was computed to determine the neighbours and the level of interaction they have with the sample data. Scaling was also done using the formula described in \cite{web1}.

The application generates an initial random data set. It is then trained using a provided sample set. The application has two output windows. The first is the map represented by colours and the second is a U-Map used to compare differences in gradient. This interface can be seen in Figure~\ref{Figure:gui}.

To execute this application type \emph{java SOM} in your console. This will provide you with all the necessary command line parameter options.

\begin{figure}[htbp]
   \centering
   \includegraphics[width=9cm]{gui.png}
   \caption{Application Interface}
   \label{Figure:gui}
\end{figure}

\section{Question 2}
This application is used to randomly generate 50000 colour vectors. Six reference vectors is randomly created. Every vector is assigned a random portion of the 50000 points. Random noise is added to each reference vector to create deviations of the reference vector. All of these points are then saved to an output file to be used as a sample data set.

To execute this application type \emph{java random file} in your console, where \emph{file} is the name of the generated sample data file.

\section{Question 3}
The first thing I did for this question was to generate a data set of 50000 points using the application developed in Question 2. This data set was then used to train a self organising map (SOM). The application used to train on was the application developed for Question 1. A 50x50 grid was created with initial random vector points and 100000 iterations was run.

After all iterations were done the SOM output was reached as in Figure~\ref{Figure:som}. The U-Map output for this iterations is given in Figure~\ref{Figure:umap}.


\begin{figure}[htbp]
   \centering
   \includegraphics[width=9cm]{som.png}
   \caption{Self Organising Map}
   \label{Figure:som}
\end{figure}

\begin{figure}[htbp]
   \centering
   \includegraphics[width=9cm]{umap.png}
   \caption{U-Map}
   \label{Figure:umap}
\end{figure}


\section{Question 4}
An possible extension to the SOM application could be to add the capabilities to classify data. The purpose of this question is to investigate this and try to implement the extension. After considering many possibilities I decided on an extension.

The problem was what distinguishes data from each other and makes them similar. To choose a way to store each set of data before being classified I also had to remember to stay with the way SOMs store data. Finally I chose to represent each set of data as a vector. To do this every character in an input file was saved as a coordinate of a vector corresponding to this file. This means if a file contained 16 characters the vector size would be 16.

All the files needed to train the classifier is then loaded into their respective vectors and given a position in the map. The test data is then loaded into their respective vectors and by using the Euclidean distance the nearest vector in the training data is then computed. The test vector is then classified to be the nearest to this vector.
\subsection{Facial Recognition}
To test this extension \emph{SOM.java} was modified to be a facial recognition application. This application can be executed by typing \emph{java SOMface} in the console. I trained this program on 280 faces, where every set of seven was from the same person. I then tried to classify 80 pictures, where every set of two pictures corresponded to a set in the training data. I achieved a success rate of 58\% with this set of data. Which was excellent considering the quality of the data. A sample training file is provided in \emph{test}. Below is the output generated by the program.

\begin{verbatim}

\end{verbatim}
\begin{thebibliography}{9}
\bibitem{Harel} D Harel,
\emph{On Visual Formalisms}, 
Communications of the ACM, Vol. 31 Nr. 5, 1988, pp 514-530

\bibitem{web1} 3D Studio Max,
\emph{Autodesk 3ds Max},	
[Online], Available from \emph{http://www.autodesk.com/3dsmax }

\bibitem{sipser} M Sipser,
\emph{Introduction to the Theory of Computation},
1997, p. 35


\end{thebibliography}
\end{document}
