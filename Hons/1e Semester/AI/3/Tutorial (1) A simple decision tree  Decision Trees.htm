<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0075)http://decisiontrees.net/node/21?PHPSESSID=38ea09c2fa73ce8ae66c221e564fa062 -->
<HTML lang=en xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Tutorial (1): A simple decision tree | Decision Trees</TITLE>
<META http-equiv=Content-Style-Type content=text/css>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<STYLE type=text/css media=all>@import url( misc/drupal.css );
</STYLE>

<STYLE type=text/css media=all>@import url( themes/friendselectric/style.css );
</STYLE>

<SCRIPT type=text/javascript> </SCRIPT>

<META content="MSHTML 6.00.2900.2873" name=GENERATOR></HEAD>
<BODY>
<DIV class=bw1>
<DIV class=bw2>
<DIV id=body-wrap>
<DIV id=header>
<DIV class=hw1>
<DIV class=hw2><A title="Index Page" href="http://decisiontrees.net/"><IMG 
id=site-logo alt=Logo 
src="Tutorial (1) A simple decision tree  Decision Trees_files/logo.png"></A> 
<H1 class=without-slogan id=site-name><A title="Index Page" 
href="http://decisiontrees.net/">Decision Trees</A></H1>
<DIV id=top-nav>
<UL id=primary>
  <LI><A title="Interactive tutorial" 
  href="http://decisiontrees.net/node/16"><SPAN class=lw1><SPAN 
  class=lw2>Tutorial</SPAN></SPAN></A> </LI>
  <LI><A title=Books href="http://decisiontrees.net/node/19"><SPAN 
  class=lw1><SPAN class=lw2>Books</SPAN></SPAN></A> </LI>
  <LI><A title=Software href="http://decisiontrees.net/node/22"><SPAN 
  class=lw1><SPAN class=lw2>Software</SPAN></SPAN></A> </LI>
  <LI><A title=Sites href="http://decisiontrees.net/node/23"><SPAN 
  class=lw1><SPAN class=lw2>Sites</SPAN></SPAN></A> </LI>
  <LI><A title=Papers href="http://decisiontrees.net/node/45"><SPAN 
  class=lw1><SPAN class=lw2>Papers</SPAN></SPAN></A> </LI>
  <LI><A title=Forums href="http://decisiontrees.net/forum"><SPAN 
  class=lw1><SPAN class=lw2>Forums</SPAN></SPAN></A> </LI>
  <LI><A title=About href="http://decisiontrees.net/node/42"><SPAN 
  class=lw1><SPAN class=lw2>About</SPAN></SPAN></A> 
</LI></UL></DIV></DIV></DIV></DIV>
<DIV class=content-both id=content>
<DIV class=cw1>
<DIV class=cw2>
<DIV class=cw3>
<DIV class=cw4>
<DIV class=cw5>
<DIV class=cw6>
<DIV class=cw7>
<DIV class=cw8>
<DIV class=content-wrap-both id=content-wrap>
<DIV class=sidebar id=sidebar-left>
<DIV class="block block-user" id=block-user-0>
<H2 class=first>User login</H2>
<DIV class=content>
<FORM action=user/login?destination=node%2F21 method=post>
<DIV class=user-login-block>
<DIV class=form-item><LABEL for=edit-name>Username:</LABEL><BR><INPUT 
class=form-text id=edit-name maxLength=64 size=15 name=edit[name]> </DIV>
<DIV class=form-item><LABEL for=edit-pass>Password:</LABEL><BR><INPUT 
class=form-password id=edit-pass type=password maxLength=64 size=15 
name=edit[pass]> </DIV><INPUT class=form-submit type=submit value="Log in" name=op> </DIV></FORM>
<DIV class=item-list>
<UL>
  <LI><A title="Create a new user account." 
  href="http://decisiontrees.net/user/register">Create new account</A>
  <LI><A title="Request new password via e-mail." 
  href="http://decisiontrees.net/user/password">Request new 
password</A></LI></UL></DIV></DIV></DIV>
<DIV class="block block-book" id=block-book-0>
<H2>Tutorial</H2>
<DIV class=content>
<DIV class=menu>
<UL>
  <LI class=leaf><A class=active 
  href="http://decisiontrees.net/node/21">Tutorial (1): A simple decision 
  tree</A>
  <LI class=leaf><A href="http://decisiontrees.net/node/25">Tutorial (2): 
  Exercise 1</A>
  <LI class=leaf><A href="http://decisiontrees.net/node/26">Tutorial (3): 
  Occam's Razor</A>
  <LI class=leaf><A href="http://decisiontrees.net/node/27">Tutorial (4): 
ID3</A>
  <LI class=leaf><A href="http://decisiontrees.net/node/28">Tutorial (5): 
  Exercise 2</A>
  <LI class=leaf><A href="http://decisiontrees.net/node/29">Tutorial (6): 
  Entropy Bias</A>
  <LI class=leaf><A href="http://decisiontrees.net/node/31">Tutorial (7): 
  Exercise 3</A>
  <LI class=leaf><A href="http://decisiontrees.net/node/32">Tutorial (8): Other 
  Splitting Criteria</A>
  <LI class=leaf><A href="http://decisiontrees.net/node/33">Tutorial (9): 
  Exercise 4</A>
  <LI class=leaf><A href="http://decisiontrees.net/node/34">Tutorial (10): 
  Advanced Topics</A>
  <LI class=leaf><A href="http://decisiontrees.net/node/35">Tutorial (11): 
  Evaluating Decision Trees</A>
  <LI class=leaf><A href="http://decisiontrees.net/node/36">Tutorial (12): 
  Exercise 5</A>
  <LI class=leaf><A href="http://decisiontrees.net/node/37">Tutorial (13): 
  Overfitting</A>
  <LI class=leaf><A href="http://decisiontrees.net/node/44">Tutorial (14): 
  Pruning</A>
  <LI class=leaf><A href="http://decisiontrees.net/node/38">Tutorial (15): 
  Exercise 6</A>
  <LI class=leaf><A href="http://decisiontrees.net/node/39">Tutorial (16): 
  Further Topics</A>
  <LI class=leaf><A href="http://decisiontrees.net/node/40">Tutorial (17): 
  Conclusion</A></LI></UL></DIV></DIV></DIV>
<DIV class="block block-user" id=block-user-1>
<H2>Navigation</H2>
<DIV class=content>
<DIV class=menu>
<UL>
  <LI class=collapsed><A href="http://decisiontrees.net/node/add"><SPAN 
  class=lw1>create content</SPAN></A> </LI></UL></DIV></DIV></DIV>
<DIV class="block block-forum" id=block-forum-0>
<H2>Active forum topics</H2>
<DIV class=content>
<DIV class=item-list>
<UL>
  <LI><A href="http://decisiontrees.net/node/47">Machine Learning Data 
  Sets</A></LI></UL></DIV>
<DIV class=more-link><A title="Read the latest forum topics." 
href="http://decisiontrees.net/forum">more</A></DIV></DIV></DIV>
<DIV class="block block-comment" id=block-comment-0>
<H2>Recent comments</H2>
<DIV class=content>
<DIV class=item-list>
<UL>
  <LI><A href="http://decisiontrees.net/node/20#comment-17">automatic 
  interaction detection</A><BR>8 weeks 3 days ago
  <LI><A href="http://decisiontrees.net/node/20#comment-16">Data sets</A><BR>8 
  weeks 6 days ago
  <LI><A href="http://decisiontrees.net/node/20#comment-15">CHAID AND 
  AID</A><BR>9 weeks 1 hour ago
  <LI><A href="http://decisiontrees.net/node/20#comment-14">re: CHAID and 
  AID</A><BR>9 weeks 1 hour ago
  <LI><A href="http://decisiontrees.net/node/20#comment-13">CHAID and 
  AID</A><BR>9 weeks 5 hours ago
  <LI><A href="http://decisiontrees.net/node/45#comment-12">Large database 
  decision tree classifiers</A><BR>9 weeks 3 days ago
  <LI><A href="http://decisiontrees.net/node/22#comment-9">Re:See5</A><BR>10 
  weeks 15 hours ago
  <LI><A href="http://decisiontrees.net/node/45#comment-8">Need papers about 
  data mining</A><BR>10 weeks 22 hours ago
  <LI><A href="http://decisiontrees.net/node/22#comment-7">See5</A><BR>10 weeks 
  22 hours ago
  <LI><A href="http://decisiontrees.net/node/20#comment-6">Access 
  problems?</A><BR>10 weeks 22 hours ago</LI></UL></DIV></DIV></DIV>
<DIV class="block block-user" id=block-user-3>
<H2>Who's online</H2>
<DIV class=content>There are currently 0 users and 14 guests 
online.</DIV></DIV></DIV>
<DIV class=main-both id=main>
<DIV class=main-wrap-both id=main-wrap>
<DIV class=mw1>
<DIV class=breadcrumb><A href="http://decisiontrees.net/">Home</A> » <A 
href="http://decisiontrees.net/node/16"><SPAN 
class=lw1>Tutorial</SPAN></A></DIV>
<H2 class=main-title>Tutorial (1): A simple decision tree</H2><!-- begin content -->
<DIV class=node>
<DIV class=content><BR>
<STYLE>TABLE {
	BORDER-COLLAPSE: separate
}
TH {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; FONT-WEIGHT: bold; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px
}
TR {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px; BORDER-BOTTOM-STYLE: none
}
TBODY {
	TEXT-ALIGN: center
}
TABLE TD {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-TOP: 0px
}
TABLE {
	MARGIN: 0.5em 0px 1em
}
TBODY {
	MARGIN-LEFT: 3px; TEXT-ALIGN: center
}
#tree {
	
}
#popupMenu {
	BORDER-RIGHT: #ccc 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: #ccc 1px solid; PADDING-LEFT: 2px; FONT-WEIGHT: bold; VISIBILITY: hidden; PADDING-BOTTOM: 2px; BORDER-LEFT: #ccc 1px solid; PADDING-TOP: 2px; BORDER-BOTTOM: #ccc 1px solid; POSITION: absolute; BACKGROUND-COLOR: #fafafa
}
.headers {
	PADDING-RIGHT: 2px; PADDING-LEFT: 2px; FONT-WEIGHT: bold; PADDING-BOTTOM: 2px; WIDTH: 50%; PADDING-TOP: 2px; BACKGROUND-COLOR: #dbe8f0
}
.subheaders {
	PADDING-RIGHT: 2px; PADDING-LEFT: 2px; FONT-WEIGHT: bold; PADDING-BOTTOM: 2px; MARGIN-LEFT: 3px; WIDTH: 75%; PADDING-TOP: 2px
}
.build {
	BACKGROUND-COLOR: #6699ff
}
.prune {
	BACKGROUND-COLOR: #ff3300
}
.correctColor {
	BACKGROUND-COLOR: #a0c0d6
}
.wrongColor {
	BACKGROUND-COLOR: #fbaac5
}
.exNode {
	PADDING-RIGHT: 2px; PADDING-LEFT: 2px; FONT-WEIGHT: bold; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; BACKGROUND-COLOR: #e7cc9a
}
.exNode:hover {
	BACKGROUND-COLOR: #b49967
}
.normalNode {
	BORDER-RIGHT: #ffffff 1px solid; PADDING-RIGHT: 2px; BORDER-TOP: #ffffff 1px solid; PADDING-LEFT: 2px; FONT-WEIGHT: normal; PADDING-BOTTOM: 2px; BORDER-LEFT: #ffffff 1px solid; PADDING-TOP: 2px; BORDER-BOTTOM: #ffffff 1px solid; BACKGROUND-COLOR: #a0c0d6
}
.normalNode:hover {
	PADDING-RIGHT: 2px; PADDING-LEFT: 2px; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; BACKGROUND-COLOR: #dbe8f0
}
.leafNode {
	PADDING-RIGHT: 2px; PADDING-LEFT: 2px; FONT-WEIGHT: normal; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; BACKGROUND-COLOR: #92f986
}
.leafNode:hover {
	BACKGROUND-COLOR: #68c652
}
.branchNode {
	
}
.normalNode1 {
	PADDING-RIGHT: 2px; PADDING-LEFT: 2px; FONT-WEIGHT: normal; PADDING-BOTTOM: 2px; PADDING-TOP: 2px; BACKGROUND-COLOR: #cc99cc
}
.correctStat {
	COLOR: #00cc66
}
.wrongStat {
	COLOR: #f8341f
}
</STYLE>
<BR>
<SCRIPT type=text/javascript>
// JavaScript Document
var aDefs = new Array();
aDefs[0] = 'District'; aDefs[1] = 'House Type'; aDefs[2] = 'Income'; aDefs[3] = 'Previous Customer'; aDefs[4] = 'Outcome';
// Each value also has a definition for each attribute
var vDefs = new Array();
vDefs[0] = new Array();
vDefs[1] = new Array();
vDefs[2] = new Array();
vDefs[3] = new Array();
vDefs[4] = new Array();
//
vDefs[0][0] = 'Suburban';
vDefs[0][1] = 'Rural';
vDefs[0][2] = 'Urban';
//
vDefs[1][0] = 'Detached';
vDefs[1][1] = 'Semi-detached';
vDefs[1][2] = 'Terrace';
//
vDefs[2][0] = 'High';
vDefs[2][1] = 'Low';
//
vDefs[3][0] = 'No';
vDefs[3][1] = 'Yes';
//
vDefs[4][0] = 'Nothing';
vDefs[4][1] = 'Responded';

// the data in a 2D array. The indices represent the table position and the values correspond to vDefs
var tData = new Array();
tData[0] = new Array();
tData[0] = [0,0,1,2,2,2,1,0,0,2,0,1,1,2]; //first col etc..
tData[1] = new Array();
tData[1] = [0,0,0,1,1,1,1,2,1,2,2,2,0,2]; //sec col
tData[2] = new Array();
tData[2] = [0,0,0,0,1,1,1,0,1,1,1,0,1,0];
tData[3] = new Array();
tData[3] = [0,1,0,0,0,1,1,0,0,0,1,1,0,1];
tData[4] = new Array();
tData[4] = [0,0,1,1,1,0,1,0,1,1,1,1,1,0];

function leafNode(elemID,tc,tw, vc, vw )
{
	this.ID = elemID;
	this.tCorrect = tc;
	this.tWrong = tw;
	this.vCorrect = vc;
	this.vWrong = vw;
	return this;
}

function treeStat()
{
	this.nodeNum =0;
	this.leafNum =0;
	this.tCorrectTotal =0;
	this.tWrongTotal =0;
	this.vCorrectTotal =0;
	this.vWrongTotal =0;
	return this;
}
iStat = new treeStat();

// WORK OUT RATIOS AT EACH NODE / BRANCH
var leafValue = null;
var leafValueIndex = -1; //to check if finished the value of the target att will be put here or not
var deadEnd = false; // to check for dead end
function calculateValue(pathNow, valNow)
{


	leafValue = null; //reset globals
	deadEnd = false;
	var rowNumbers = new Array();

	for (var x=0; x<pathNow.length; x++)
	{
			att = pathNow[x];
			if (x==pathNow.length-1)
			{
				val = valNow
			}
			else
			{
				x++;
				val = pathNow[x];
			}
			//alert('val for this att in path = ' +val);
			for (var y=0; y<tData[att].length; y++) //go through data in coloumn of att off path
			{
				//alert(tData[att][y]);
				if (tData[att][y] == val && iRows[y] != 1)
				{
					//alert('matches at row ' +y);
					rowNumbers.push(y); //row num in attribute coloumn where value matches value in tree
				}
			}
	}
	// Now look at row numbers to see which value occurs (pathNow.length+1)/2 times
	var targetRowNumbers = new Array();
	for (var c=0; c<rowNumbers.length;c++)
	{
		if (!isIn(targetRowNumbers,rowNumbers[c])) // if we have looked at this row already
		{
			if (countValue(rowNumbers,rowNumbers[c]) == (pathNow.length+1)/2)
			{
				targetRowNumbers.push(rowNumbers[c]); //target row to look at
			}
		}
	}
	// iterate through target values of targetRow Numbers and work out a fraction to return as String
	var correct = new Array();
	for (var d=0; d<targetRowNumbers.length;d++)
	{
		correct.push(tData[tData.length-1][targetRowNumbers[d]]);
		//leafValueIndex = tData[tData.length-1][targetRowNumbers[d]];
	}
	// Now work out which of correct answers is a majority
	highest = 0;
	//alert(correct.length);
	for (var e=0; e<correct.length; e++)
	{
		check =	countValue(correct,correct[e]);
		if ( check > highest )
		{
			highest = check;
			leafValue = correct[e];
		}
	}
	leafValueIndex = leafValue;

	if (highest != correct.length)
	{
		leafValue = null;
	}
	if (correct.length == 0)
	{
		deadEnd = true;
	}
	return '' +highest +'/' +correct.length;

}


function ratiosOn()
{
	if (ratios == false)
	{
		ratios = true;
	}
	else
	{
		ratios = false;
	}
}

// functions


function showStats()
{
	getE('tC').childNodes[0].nodeValue = iStat.tCorrectTotal;
	getE('tW').childNodes[0].nodeValue = iStat.tWrongTotal;
	getE('vC').childNodes[0].nodeValue = iStat.vCorrectTotal;
	getE('vW').childNodes[0].nodeValue = iStat.vWrongTotal;
}

function clearChildStats(rootNode)
{
	//alert(rootNode.id);
	for (var a=0; a < iLeaves.length; a++)
	{
		if (iLeaves[a] && rootNode.id == iLeaves[a].ID)
		{
			//alert(iLeaves[a].ID +' has wrong ' +iLeaves[a].tWrong +' and ' +iLeaves[a].vWrong);
			iStat.tCorrectTotal -= iLeaves[a].tCorrect;
			iStat.tWrongTotal -= iLeaves[a].tWrong;
			iStat.vCorrectTotal -= iLeaves[a].vCorrect;
			iStat.vWrongTotal -= iLeaves[a].vWrong
			iLeaves[a] = null;
		}
	}
	for (var x=0; x < rootNode.childNodes.length; x++)
	{
		clearChildStats(rootNode.childNodes[x]);
	}
}

function checkPaths(pathArray,nodeType,fCall)
{
	/*if (fCall == 1)
	{
			mydiv = getE('popupMenu'); // The popup we're gonna use
			initPopup(mydiv);
			mL = ct('a');
			matchLinkT = "JAVASCRIPT:showMatches(" +array2String(pathArray) +nodeType +fCall +")";
			mL.setAttribute('href',matchLinkT);
			mL.appendChild(document.createTextNode('Show Matches'));
			mydiv.appendChild(mL);
			var NORESET = true; //GLOBAL TO STOP POPUP RESETTING WHEN BUILD LIST APPEARS AT PRUNED LEAF
			return;
	}*/
	clearRows();
	var targetA = -1;
	var targetV = -1;
	var matchedIndexes = new Array();
	var largestClassIndexes = new Array();
	var otherClassIndexes = new Array();
	if (nodeType == 1) //i.e. LEAF NODE
	{
		targetV = pathArray.pop(); //last one
		targetA = pathArray.pop(); //2nd last one
	}
	for (var x=0; x < tData[0].length; x++) // LOOP THROUGH EACH COLOUMN OF DATA
	{
		// CHECK THAT PATH VALUES ARE IN THAT COLUMN
		allOk = true
		for (var y=0; y < pathArray.length; y++)
		{
			att = pathArray[y]; y++;
			val = pathArray[y]; //got both pairs
			if (tData[att][x] != val)
			{
				allOk = false; //one value in path does not match that in table row
			}
		}
		if (allOk == true) //all values in path were in row!
		{
			matchedIndexes.push(x);
		}
	}

	tTCnow = 0;
	tTWnow = 0;
	tVCnow = 0;
	tVWnow = 0;



	if (nodeType ==1)
	{
		for (var z=0; z < matchedIndexes.length; z++)
		{
			r = getE('d_' +matchedIndexes[z]);
			if (tData[tData.length-1][(matchedIndexes[z])] == targetV)
			{
				if (fCall == 1) //NODE CLICKED ON
				{
					r.className = 'correctColor';
				}
				else // LEAF REACHED
				{
					if (r.parentNode.parentNode.id == 'dataTable')
					{
						tTCnow++;
					}
					else
					{
						tVCnow++;
					}
				}
			}
			else
			{
				if (fCall == 1) //NODE CLICKED ON
				{
					r.className = 'wrongColor';
				}
				else
				{
					if (r.parentNode.parentNode.id == 'dataTable')
					{
						tTWnow++;
					}
					else
					{
						tVWnow++;
					}
				}
			}
		}
	}
	if (fCall == 0)
	{
		iStat.tCorrectTotal += tTCnow;
		iStat.vCorrectTotal += tVCnow;
		iStat.tWrongTotal += tTWnow;
		iStat.vWrongTotal += tVWnow;
		leafObj = new leafNode(array2String(pathArray),tTCnow,tTWnow,tVCnow,tVWnow )
		iLeaves.push(leafObj);
		// We need this (^) and so we can decrement stats when nodes are pruned or whatever
		showStats();
		return leafObj;
		// at this point
	}

	else //move doc scroll up to data
	{
		document.body.scrollTop = 0;
		if (oldLeafInspect != null)
		{
			oldLeafInspect.style.border = 'none';
		}
		oldLeafInspect = targetElem.parentNode.parentNode;
		targetElem.parentNode.parentNode.style.border = '2px solid #000000';
	}
}

function clearRows()
{
	var allRows = document.getElementsByTagName('tr');
	for (var x=0; x< allRows.length; x++)
	{
		if ( (allRows[x].className == 'correctColor') || (allRows[x].className == 'wrongColor') )
		{
			allRows[x].className = '';
		}
	}

}

function browser()
{
   if (navigator.userAgent.indexOf("MSIE") > 0)
   {
       this.ie = 1;
   }
   else
   {
       this.ie = 0;
   }
   return this;
}
var browser = new browser(); // grab a ref to it

function countValue(myList, myVal)
{
	var mycount = 0;
	for (var x=0; x<myList.length; x++)
	{
		if (myVal == myList[x])
		{
			mycount++;
		}
	}
	return mycount;
}

function cloneArray(copyA)
{
	var returnthis = new Array();
	for (var x=0; x< copyA.length; x++)
	{
		returnthis[x] = copyA[x];
	}
	return returnthis;
}
function isIn(myList, myVal)
{
	for (var x=0; x<myList.length; x++)
	{
		if (myVal == myList[x])
		{
			return true;
		}
	}
	return false;
}

function debugOut()
{
	//getE('info').innerText = getE('tree').outerHTML;
}

function ct(tagname)
{
	return document.createElement(tagname);
}

function getE(elemID)
{
	return document.getElementById(elemID);
}

// Converts an array [x,y,z] and an item a into a string '[x,y,z,a]'
function array2StringPlus(ar,appendit)
{
	var val = '[';

	if (ar.length != 0)
	{
			for (var y = 0; y < ar.length; y++)
			{
				val += ar[y];
				if (y!=ar.length-1) //not last
				{	val += ',';
				}
			}
	}
	if (appendit != -1)
	{
				if (ar.length != 0)
				{val += ',';}
				val += appendit;
	}
			val += ']';

	return val;

}
// Just with an array
function array2String(arr)
{
	var rval = '';
	if (arr.length != 0)
	{
			for (var y = 0; y < arr.length; y++)
			{
				rval += arr[y];
			}
	}

	return rval;
}

function string2Array(myString)
{
	var toReturn = new Array();
	for (var x=0; x<myString.length; x++)
	{
		toReturn[x] = myString.charAt(x);
	}
	return toReturn;
}

// ALL FOR MOUSEOVER COLOR ON ROWS:
function setup()
{
	allTRs = document.getElementsByTagName('tr');
	for (var x=0; x < allTRs.length; x++)
	{
		if (allTRs[x].id.indexOf('d_') != -1)
		{
			allTRs[x].onmouseover = colorIt;
			allTRs[x].onmouseout = stopIt;
		}
	}
}

function colorIt(evt)
{
	if (started == false)
	{
		evt = (evt) ? evt: (window.event) ? window.event : "";
		if (browser.ie)
		{
			hey = evt.srcElement.parentNode;
		}
		else
		{
			hey = evt.target.parentNode;
		}
		hey.style.backgroundColor = '#A9EAF1';
	}
}

function stopIt(evt)
{
	if (started == false)
	{
		evt = (evt) ? evt: (window.event) ? window.event : "";
		if (browser.ie)
		{
			hey = evt.srcElement.parentNode;
		}
		else
		{
			hey = evt.target.parentNode;
		}
		hey.style.backgroundColor = '';
	}
}

// Need to get mouse coords as globals to determine where to put the DIV
document.onclick = registerMouse;
var mX = 0; var mY = 0; //for popup
var targetElem;
function registerMouse(evt) // MOVES ROWS FROM TABLE TO TABLE
{
	evt = (evt) ? evt: (window.event) ? window.event : "";
	if (evt.pageX)
	{
		mX = evt.pageX;
		mY = evt.pageY;
	}
	else
	{
		mX = evt.x + document.body.scrollLeft;
		mY = evt.y + document.body.scrollTop;
	}

	if (browser.ie)
	{
		targetElem = evt.srcElement;
	}
	else
	{
		targetElem = evt.target;
	}
	//alert(targetElem.parentNode.parentNode.parentNode.id);
	// VALIDATION DATA MOVEMENT
	if (validation == true && started == false && targetElem.parentNode.className != 'dataHeaders' && targetElem.parentNode.id.indexOf('d_') != -1)
	{
		whichTab = targetElem.parentNode.parentNode.parentNode;
		if (whichTab.id == 'dataTable')
		{
			if (browser.ie && whichTab.childNodes[0].childNodes.length > 2)
			{
				rowToMove = targetElem.parentNode.parentNode.removeChild(targetElem.parentNode);
				getE('validTable').childNodes[0].appendChild(rowToMove);
			}
			else if ( (!browser.ie) && (whichTab.childNodes[1].childNodes.length > (tData[0].length*2)+3-tData[0].length) )
			{
				//alert(whichTab.childNodes[1].childNodes.length);
				rowToMove = targetElem.parentNode.parentNode.removeChild(targetElem.parentNode);
				getE('validTable').childNodes[1].appendChild(rowToMove);
			}
			rowIndex = rowToMove.id.substring(2,rowToMove.id.length);
			iRows[rowIndex] = 1; // SETS A FLAG TO MAKE SURE WE CAN CHECK THAT THIS ROW IS IN VALID DATA TABLE
		}
		else if (whichTab.id == 'validTable') // move back to data table
		{
			if (browser.ie)
			{
				rowToMove = targetElem.parentNode.parentNode.removeChild(targetElem.parentNode);
				getE('dataTable').childNodes[0].appendChild(rowToMove);
			}
			else
			{
				rowToMove = targetElem.parentNode.parentNode.removeChild(targetElem.parentNode);
				getE('dataTable').childNodes[1].appendChild(rowToMove);
			}
			rowIndex = rowToMove.id.substring(2,rowToMove.id.length);
			iRows[rowIndex] = 0; // SETS A FLAG BACK TO 0 SO WE KNOW THIS ROW IS NOW BACK IN DATA TABLE
		}
		rowToMove.style.backgroundColor = '';
	}

}


var started = false;
var iRows = new Array();
var iLeaves = new Array();
var oldLeafInspect = null;
var ratios = true;
var leafStats = false;
var infoGain = false;
var fullPruning = false;
var validation = false;
</SCRIPT>

<H2>An example dataset </H2>
<P>Imagine we have the following data about a fictitious marketing strategy. Say 
some company sent out some promotion to various houses and recorded a few facts 
about each house and also whether the people responded or not:</P>
<TABLE id=dataTable width="70%" border=0>
  <TBODY>
  <TR>
    <TD class=titles>District</TD>
    <TD class=titles>House Type</TD>
    <TD class=titles>Income</TD>
    <TD class=titles>Previous <BR>Customer </TD>
    <TD class=titles>Outcome</TD></TR>
  <TR id=d_0>
    <TD>Suburban</TD>
    <TD>Detached</TD>
    <TD>High</TD>
    <TD>No</TD>
    <TD>Nothing</TD></TR>
  <TR id=d_1>
    <TD>Suburban</TD>
    <TD>Detached</TD>
    <TD>High</TD>
    <TD>Responded</TD>
    <TD>Nothing</TD></TR>
  <TR id=d_2>
    <TD>Rural</TD>
    <TD>Detached</TD>
    <TD>High</TD>
    <TD>No</TD>
    <TD>Responded</TD></TR>
  <TR id=d_3>
    <TD>Urban</TD>
    <TD>Semi-detached</TD>
    <TD>High</TD>
    <TD>No</TD>
    <TD>Responded</TD></TR>
  <TR id=d_4>
    <TD>Urban</TD>
    <TD>Semi-detached</TD>
    <TD>Low</TD>
    <TD>No</TD>
    <TD>Responded</TD></TR>
  <TR id=d_5>
    <TD id=yeah>Urban</TD>
    <TD>Semi-detached</TD>
    <TD>Low</TD>
    <TD>Responded</TD>
    <TD>Nothing</TD></TR>
  <TR id=d_6>
    <TD>Rural</TD>
    <TD>Semi-detached</TD>
    <TD>Low</TD>
    <TD>Responded</TD>
    <TD>Responded</TD></TR>
  <TR id=d_7>
    <TD>Suburban</TD>
    <TD>Terrace</TD>
    <TD>High</TD>
    <TD>No</TD>
    <TD>Nothing</TD></TR>
  <TR id=d_8>
    <TD>Suburban</TD>
    <TD>Semi-detached</TD>
    <TD>Low</TD>
    <TD>No</TD>
    <TD>Responded</TD></TR>
  <TR id=d_9>
    <TD>Urban</TD>
    <TD>Terrace</TD>
    <TD>Low</TD>
    <TD>No</TD>
    <TD>Responded</TD></TR>
  <TR id=d_10>
    <TD>Suburban</TD>
    <TD>Terrace</TD>
    <TD>Low</TD>
    <TD>Responded</TD>
    <TD>Responded</TD></TR>
  <TR id=d_11>
    <TD>Rural</TD>
    <TD>Terrace</TD>
    <TD>High</TD>
    <TD>Responded</TD>
    <TD>Responded</TD></TR>
  <TR id=d_12>
    <TD>Rural</TD>
    <TD>Detached</TD>
    <TD>Low</TD>
    <TD>No</TD>
    <TD>Responded</TD></TR>
  <TR id=d_13>
    <TD>Urban</TD>
    <TD>Terrace</TD>
    <TD>High</TD>
    <TD>Responded</TD>
    <TD>Nothing</TD></TR></TBODY></TABLE>
<P>Imagine that we had thousands and thousands of instances (records) of this 
stuff. Here we have only 14, but if we had a lot, then it would be reasonable to 
assume that there would be some patterns in it. What sort of patterns? What 
could we find out? Well, we might discover some underlying relationships between 
some of the attributes, in particular it would be good to know which factors 
influence whether someone responds or not. That is, which factors most strongly 
affect a household's response to the promotion. In the data above for example, 
we can see that all rural households responded. This would be useful to know, as 
next time we might only have so many promotional brochures and so we would like 
to be selective as to where we send them in order to get the most responses. The 
example above is pretty trivial and we could probable analyse it manually just 
by looking, but the general idea if we had more instances would be to build some 
sort of classifier which could be used to examine the underlying relationships 
and make future predictions about the target concept (in this case the outcome 
of a mailed promotion). This is where automated building of decision trees comes 
in - a technique that can be used to generate some rules about data and then 
perform generalisation and prediction tasks. </P>
<P>We'll stick with the example data above in this tutorial and use it to show 
how we could build a decision tree to analyse it. Of course we're not going to 
'build' any trees ourselves-we'd get some software to do it, or some seeds and a 
pot- but it's important to examine the techniques involved.</P>
<H2>The Decision Tree </H2>
<P>How can a tree help here? Well, in order to generate a set of rules we can 
construct a decision tree. This is done top-down from a root node and involves 
partitioning the data into subsets that contain instances that have similar 
values. Doing this for the dataset above can result in such a tree:</P>
<TABLE id=tree width="70%">
  <TBODY><BR>
  <TR>
    <TD id=-1-1><SPAN class=exNode>District</SPAN></TD></TR>
  <TR>
    <TD align=middle>
      <TABLE>
        <TBODY><BR>
        <TR>
          <TD style="BORDER-BOTTOM: #000000 1px solid" colSpan=3>|</TD></TR>
        <TR>
          <TD vAlign=top>
            <TABLE>
              <TBODY><BR>
              <TR>
                <TD class=branchNode>|<BR>Suburban<BR>3/5<BR>|</TD></TR>
              <TR>
                <TD id=00><SPAN class=exNode>House Type</SPAN></TD></TR>
              <TR>
                <TD>
                  <TABLE align=center>
                    <TBODY><BR>
                    <TR>
                      <TD style="BORDER-BOTTOM: #000000 1px solid" 
                      colSpan=3>|</TD></TR>
                    <TR>
                      <TD vAlign=top>
                        <TABLE>
                          <TBODY><BR>
                          <TR>
                            <TD 
                          class=branchNode>|<BR>Detached<BR>2/2<BR>|</TD></TR>
                          <TR>
                            <TD id=0010><SPAN 
                          class=leafNode>Nothing</SPAN></TD></TR></TBODY></TABLE></TD>
                      <TD vAlign=top>
                        <TABLE>
                          <TBODY><BR>
                          <TR>
                            <TD 
                            class=branchNode>|<BR>Semi-detached<BR>1/2<BR>|</TD></TR>
                          <TR>
                            <TD id=0011><SPAN class=exNode>Income</SPAN></TD></TR>
                          <TR>
                            <TD>
                              <TABLE align=center>
                                <TBODY><BR>
                                <TR>
                                <TD style="BORDER-BOTTOM: #000000 1px solid" 
                                colSpan=2>|</TD></TR>
                                <TR>
                                <TD vAlign=top>
                                <TABLE>
                                <TBODY><BR>
                                <TR>
                                <TD 
                                class=branchNode>|<BR>High<BR>1/1<BR>|</TD></TR>
                                <TR>
                                <TD id=001120><SPAN 
                                class=leafNode>Nothing</SPAN></TD></TR></TBODY></TABLE></TD>
                                <TD vAlign=top>
                                <TABLE>
                                <TBODY><BR>
                                <TR>
                                <TD 
                                class=branchNode>|<BR>Low<BR>1/1<BR>|</TD></TR>
                                <TR>
                                <TD id=001121><SPAN 
                                class=leafNode>Responded</SPAN></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></TD>
                      <TD vAlign=top>
                        <TABLE>
                          <TBODY><BR>
                          <TR>
                            <TD 
class=branchNode>|<BR>Terrace<BR>1/1<BR>|</TD></TR>
                          <TR>
                            <TD id=0012><SPAN 
                            class=leafNode>Responded</SPAN></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></TD>
          <TD vAlign=top>
            <TABLE>
              <TBODY><BR>
              <TR>
                <TD class=branchNode>|<BR>Rural<BR>4/4<BR>|</TD></TR>
              <TR>
                <TD id=01><SPAN 
            class=leafNode>Responded</SPAN></TD></TR></TBODY></TABLE></TD>
          <TD vAlign=top>
            <TABLE>
              <TBODY><BR>
              <TR>
                <TD class=branchNode>|<BR>Urban<BR>3/5<BR>|</TD></TR>
              <TR>
                <TD id=02><SPAN class=exNode>Previous Customer</SPAN></TD></TR>
              <TR>
                <TD>
                  <TABLE align=center>
                    <TBODY><BR>
                    <TR>
                      <TD style="BORDER-BOTTOM: #000000 1px solid" 
                      colSpan=2>|</TD></TR>
                    <TR>
                      <TD vAlign=top>
                        <TABLE>
                          <TBODY><BR>
                          <TR>
                            <TD class=branchNode>|<BR>No<BR>3/3<BR>|</TD></TR>
                          <TR>
                            <TD id=0230><SPAN 
                            class=leafNode>Responded</SPAN></TD></TR></TBODY></TABLE></TD>
                      <TD vAlign=top>
                        <TABLE>
                          <TBODY><BR>
                          <TR>
                            <TD class=branchNode>|<BR>Yes<BR>2/2<BR>|</TD></TR>
                          <TR>
                            <TD id=0231><SPAN 
                          class=leafNode>Nothing</SPAN></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<H2>Explanation</H2>
<P>Ok, so the nodes in <SPAN class=exNode>brown</SPAN> in the tree correspond to 
attributes. At each node the dataset is split into subsets based on the value of 
the attribute at the node. For instance, at the root node, we split the entire 
dataset into three subsets. One that contains only instances (rows, tuples, 
whatever) that have the value 'Suburban' for the 'District' attribute, one that 
that contains only instances where the District attribute is 'Urban', and one 
where the all the instances are 'Rural' for that attribute. The numbers on the 
branches are important here: They correspond to the number of instances in each 
subset that have one and only one value for the target attribute ('Outcome'). 
This basically says how well the given value of the attribute we split on 
relates to the target attribute. What? Look at the tree - the middle branch of 
the first node. '4/4' below 'Rural' indicates that all four of the instances 
with District=Rural have the same value for 'Outcome' (in this case 
'Responded'). This is good, because we have split the data using this 
attribute=value pairing to perfectly classify all instances that have this 
pairing. In other cases the value of the District attribute does not lead to a 
perfect, or pure subset. These ideas are related to <SPAN 
class=titles>entropy</SPAN> which we shall examine later. Anyway, continuing 
with the above tree - look at the first branch of the first node. This tells us 
that when District=Suburban, only 3 of 5 instances have the same value of the 
target attribute. In this case, it is necessary to continue splitting up this 
subset using other attribute tests until we have only pure subsets. The 5 
instances which have District=Suburban on the left-most branch are then tested 
with 'House-Type' and are split into further subsets. The tree construction 
continues until purity, or until all the subsets are pure (with respect to the 
target attribute). When this occurs the branch terminates in a <SPAN 
class=leafNode>green leaf node</SPAN> that specifies what value the target 
attribute takes for all instances that have been filtered down this branch. </P>
<H2>Rules From The Tree</H2>
<P>Ok, so we can represent the data with a tree? So what? Well we can extract 
rules from the tree quite easily. Just read off the paths of all the leaf nodes. 
This gives us (from left to right in the tree):</P>
<DIV class=breadcrumb>
<UL>
  <LI>(District=Suburban) AND (House Type=Detached) =&gt;<SPAN class=titles> 
  (Outcome = Nothing)</SPAN> 
  <LI>(District=Suburban) AND (House Type=Semi-Detached) AND (Income=High) =&gt; 
  <SPAN class=titles>(Outcome = Nothing)</SPAN> 
  <LI>(District=Suburban) AND (House Type=Semi-Detached) AND (Income=Low) 
  =&gt;<SPAN class=titles> (Outcome = Responded)</SPAN> 
  <LI>(District=Suburban) AND (House Type=Terrace) =&gt;<SPAN class=titles> 
  (Outcome = Responded)</SPAN> 
  <LI>(District=Urban) AND (Previous Customer=No) =&gt;<SPAN class=titles> 
  (Outcome = Responded)<BR></SPAN>
  <LI>(District=Urban) AND (Previous Customer=Yes) <SPAN class=titles>=&gt; 
  (Outcome = Nothing)</SPAN> 
  <LI>(District=Rural)<SPAN class=titles> =&gt; (Outcome = Responded)</SPAN> 
  </LI></UL></DIV>
<P>A disjunction of conjunctions. This is useful for summarising the data and 
extracting the underlying relationships. </P>
<P class=titles>How can this be used for classification and prediction? </P>
<P>Well, say for example that we wanted to predict the outcome of mailing to a 
certain house. We could just of course do a look-up on our dataset to see if the 
characteristics of this new house matched any we had mailed to before with the 
assumption that the new house will respond in the same way. This won't always be 
possible though, as our dataset here doesn't represent all the possible 
combinations. <SPAN class=titles>Instead we use the decision tree to 
generalise.</SPAN></P>
<P>E.g. If we know the District we're going to mail to is Urban and the person 
was a previous customer, then the tree predicts that the person will 
<EM>not</EM> respond (Follow the attributes and values down the tree). </P>
<H2>Practically?</H2>
<P>Ok, so this illustrates the basic idea how we can use Decision Tree Learning. 
You might be thinking that this is a very small, contrived example and that 
really it's all fairly random what happened. Well, yes, yes and yes, but the 
same basic idea is used in practical situations. Imagine if we had thousands of 
records of data for a concept like the one above and maybe lots more attributes, 
perhaps some of them with numeric attributes. We wouldn't be able to analyse 
such data by just looking at it and so constructing a decision tree would help. 
Furthermore, the more data we have, then the more chance that we can get a real 
insight into the any underlying function or relationship between the attributes. 
This is because the tree generalises when used for predictions and we would be 
more confident about it's accuracy if it had been constructed from many examples 
instead of just a few. There are many other complications and details to worry 
about, but all that can be looked at later. Right now, we are going to look at 
the tree building process a bit more.</P>
<H2>One Dataset: Many Trees</H2>
<P>For any given dataset there are a lot of possible trees that we could 
construct. Instead of having the root node as 'District', it could have been 
'Income' for example. Likewise, the second child node could have been 
'House-Type' instead of 'Previous-Customer'. <A class=normallink 
href="http://decisiontrees.net/node/25">Have a go building a tree from this 
dataset on the next page</A>. You will see that there are many possible trees 
that can be built to model this data. They are all perfectly legitimate decision 
trees. Try to find the shortest (least number of nodes). </P>
<DIV class=book>
<DIV class=nav>
<DIV class=links>
<DIV class=prev><A title="View the previous page." 
href="http://decisiontrees.net/node/16">previous</A></DIV>
<DIV class=next><A title="View the next page." 
href="http://decisiontrees.net/node/25">next</A></DIV>
<DIV class=up><A title="View this page's parent section." 
href="http://decisiontrees.net/node/16">up</A></DIV></DIV>
<DIV class=titles>
<DIV class=prev>Tutorial</DIV>
<DIV class=next>Tutorial (2): Exercise 1</DIV></DIV></DIV></DIV></DIV>
<DIV class=links><A 
title="Show a printer-friendly version of this book page and its sub-pages." 
href="http://decisiontrees.net/book/print/21">printer-friendly version</A> – <A 
title="Share your thoughts and opinions related to this posting." 
href="http://decisiontrees.net/comment/reply/21#comment">add new 
comment</A></DIV></DIV><A id=comment></A>
<FORM action=comment method=post>
<DIV><INPUT type=hidden value=21 name=edit[nid]> </DIV></FORM><!-- end content -->
<DIV class=footer-both id=footer>
<P>
<SCRIPT type=text/javascript><!--
google_ad_client = "pub-5329483376432160";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "text";
google_ad_channel ="";
google_color_border = "336699";
google_color_bg = "FFFFFF";
google_color_link = "CF094A";
google_color_url = "8BAEC9";
google_color_text = "000000";
//--></SCRIPT>

<SCRIPT 
src="Tutorial (1) A simple decision tree  Decision Trees_files/show_ads.js" 
type=text/javascript>
</SCRIPT>
</P></DIV></DIV></DIV></DIV></DIV>
<DIV class=sidebar id=sidebar-right>
<DIV class="block block-block" id=block-block-1>
<H2 class=first>Adverts</H2>
<DIV class=content><BR>
<SCRIPT type=text/javascript><!--
google_ad_client = "pub-5329483376432160";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel ="8309837109";
google_color_border = "336699";
google_color_bg = "FFFFFF";
google_color_link = "CF094A";
google_color_url = "8BAEC9";
google_color_text = "000000";
//--></SCRIPT>
<BR>
<SCRIPT 
src="Tutorial (1) A simple decision tree  Decision Trees_files/show_ads.js" 
type=text/javascript>
</SCRIPT>
<BR></DIV></DIV></DIV><SPAN 
class=clear></SPAN></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV></DIV>
<DIV class=end-both id=end>
<DIV class=ew1>
<DIV class=ew2></DIV></DIV></DIV></BODY></HTML>
